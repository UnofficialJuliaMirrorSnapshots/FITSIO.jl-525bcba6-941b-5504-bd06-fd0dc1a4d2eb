using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcfitsio"], :libcfitsio),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaAstro/CFITSIOBuilder/releases/download/v3.450"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.aarch64-linux-gnu.tar.gz", "c1f200adfc1782606b1eb53a4bdc65f4c17e1738894bf2406813a6536a884f50"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.aarch64-linux-musl.tar.gz", "af421cf1f01426657af468b494d65cf746888bf9bb01dcf5379dc8080df1f449"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.arm-linux-gnueabihf.tar.gz", "d5db9d9d0de1d4b286211c2ecde0758f00763722450be84ab7551508c93166f8"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.arm-linux-musleabihf.tar.gz", "a8c7827e8bad3c18778f2040f8e8684e52ab583671c4bfb7fcce1e27e1839068"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.i686-linux-gnu.tar.gz", "717936aecb5395516486f551bd114fc89c9d9f3a17c553b89d4bf3285246a511"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.i686-linux-musl.tar.gz", "5e26949c9ce715ef96334d12e7665c27a8970556107e079dae184243d8da84ea"),
    Windows(:i686) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.i686-w64-mingw32.tar.gz", "3b69835ca93a5bc49da4a7a771125ee05e8ae36706a29ecc888f11de2faee549"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.powerpc64le-linux-gnu.tar.gz", "4785638f73a8dc8ed6ff8e084557b63c5d5cb99299f7cfd07a433d67677bf429"),
    MacOS(:x86_64) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.x86_64-apple-darwin14.tar.gz", "5ced6b691cdfb9e07748d297821df4c238e8921bb132c934b51a68f9d6395b14"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.x86_64-linux-gnu.tar.gz", "8c44c91702067aaf6c92ca8f5a19d9d713cfb19a34f343ac9b41fa3a972592a4"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.x86_64-linux-musl.tar.gz", "cc559d122914b2e1eeffa346fbf0a5597159eb0f62f12ae73f6e460cefc42add"),
    FreeBSD(:x86_64) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.x86_64-unknown-freebsd11.1.tar.gz", "62ed83e6f23c870ba9850ddc9eaef9f953c5717420ca66c9d4a813085a638088"),
    Windows(:x86_64) => ("$bin_prefix/CFITSIOBuilder.v3.45.0.x86_64-w64-mingw32.tar.gz", "9dafa6ee38b46e2ae1fe2fd0684d61c6dc2e1e2c15dfeb38203a1330cf0f53da"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
