using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcfitsio"], :libcfitsio),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/CFITSIO-v3.47.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.aarch64-linux-gnu.tar.gz", "0ee5ed9b696f92823b10afb66a9b79ac07c7e5390ff903d0be2ee25fe495abbd"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.aarch64-linux-musl.tar.gz", "24406c74f30847a4ac0e553e8c34b0402d3c0de31db3ce1475053005055bb818"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.arm-linux-gnueabihf.tar.gz", "00c79affa20b8d1ce4e618913f3e52e6fb45b76f1e1eda9f9562315acb6de69f"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.arm-linux-musleabihf.tar.gz", "91461e55c534303fcf6744f3abd9af0dd426aec3d1ccc5106f8fff35854ff122"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.i686-linux-gnu.tar.gz", "a69753dafdcb3a7cbd3b68a642c44f88fa57a4cbabbc7acbf534a6e22bc76691"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.i686-linux-musl.tar.gz", "a841ce277872e2157ea0e4ddd30d1cd4f520b9d30965dcc76ba509de8ff5877e"),
    Windows(:i686) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.i686-w64-mingw32.tar.gz", "caba256f2b8c770d7a055b43ade7eab096280e731b1976fcb9a0dde8b90cf80b"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.powerpc64le-linux-gnu.tar.gz", "ba5201e11f67680737941c72b4abce3d3905a1e890df102c85de0e53d126a229"),
    MacOS(:x86_64) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.x86_64-apple-darwin14.tar.gz", "9c84651742f02936b449f7a451a40a290885a4d619ea823185dfe84890b6d3c8"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.x86_64-linux-gnu.tar.gz", "4e0b88ad32d073209d198d48488053a52a484a1f41676f3b6406a548667796c2"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.x86_64-linux-musl.tar.gz", "9a81e9127bb6ac8485bb631e85963655ef7c32dc4eca0f9a8c900b8de803e67c"),
    FreeBSD(:x86_64) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.x86_64-unknown-freebsd11.1.tar.gz", "9fccd372175bd14fb21242036c9548f9d8abf2d4cbd1feb3cb2b2cf6df42f1ef"),
    Windows(:x86_64) => ("$bin_prefix/CFITSIOBuilder.v3.47.0.x86_64-w64-mingw32.tar.gz", "9561454f5e5ff4d5840ebab6cccb0845b15a6574e7f026e6369c80e176a6043f"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
